Debug Started
---Formula Inserted: V0{Annetta}
-----Analizyng input formula
-----Computing Literal: V0{Annetta}
-----Extracting Data From Var. Input String: V0{Annetta}
-----Data From Var Computed. Name: Annetta. Level:0
-----Creating  Variable.  Name:Annetta. Level: 0. Type: 0
-----Adding Variable to Set. V0{Annetta}
-----Declaration Found: V0{Annetta}
---Formula Ended 
---Formula Inserted: ($FA V0{z})($FA V0{z1})($FA V0{z2})((V0{z} $IN V1{Tower})$IF(( (((V0{z1} $IN V1{WindingStaircase})$AD ($OA V0{z} $CO V0{z1} $OA $IN V3{contains}))$AD (((V0{z2} $IN V1{WindingStaircase})$AD ($OA V0{z} $CO V0{z2} $OA $IN V3{contains})))) $IF ((V0{z1} $EQ V0{z2})))$AD(( ((((V0{z1} $IN V1{WindingStaircase})$AD ($OA V0{z} $CO V0{z1} $OA $IN V3{contains})))) $IF(V0{z1} $QE V0{z2})))))
-----Analizyng input formula
-----Candidate atom found: $FAV0{z}
-----Computing Literal: $FAV0{z}
-----Extracting Data From Var. Input String: V0{z}
-----Data From Var Computed. Name: z. Level:0
-----Creating Quantified Variable.  Name:z. Level: 0. Type: 1
-----Adding Quantified Variable to Set.V0{z}
-----Candidate atom found: $FAV0{z1}
-----Computing Literal: $FAV0{z1}
-----Extracting Data From Var. Input String: V0{z1}
-----Data From Var Computed. Name: z1. Level:0
-----Creating Quantified Variable.  Name:z1. Level: 0. Type: 1
-----Adding Quantified Variable to Set.V0{z1}
-----Candidate atom found: $FAV0{z2}
-----Computing Literal: $FAV0{z2}
-----Extracting Data From Var. Input String: V0{z2}
-----Data From Var Computed. Name: z2. Level:0
-----Creating Quantified Variable.  Name:z2. Level: 0. Type: 1
-----Adding Quantified Variable to Set.V0{z2}
-----Candidate atom found: V0{z}$INV1{Tower}
-----Computing Literal: V0{z}$INV1{Tower}
-----Extracting Data From Var. Input String: V0{z}
-----Data From Var Computed. Name: z. Level:0
-----Creating  Variable.  Name:z. Level: 0. Type: 0
-----Variable Found in Quantified Set. V0{z}
-----Extracting Data From Var. Input String: V1{Tower}
-----Data From Var Computed. Name: Tower. Level:1
-----Creating  Variable.  Name:Tower. Level: 1. Type: 0
-----Adding Variable to Set. V1{Tower}
-----Literal created: (V0{z} $IN V1{Tower})
-----Candidate atom found: V0{z1}$INV1{WindingStaircase}
-----Computing Literal: V0{z1}$INV1{WindingStaircase}
-----Extracting Data From Var. Input String: V0{z1}
-----Data From Var Computed. Name: z1. Level:0
-----Creating  Variable.  Name:z1. Level: 0. Type: 0
-----Variable Found in Quantified Set. V0{z1}
-----Extracting Data From Var. Input String: V1{WindingStaircase}
-----Data From Var Computed. Name: WindingStaircase. Level:1
-----Creating  Variable.  Name:WindingStaircase. Level: 1. Type: 0
-----Adding Variable to Set. V1{WindingStaircase}
-----Literal created: (V0{z1} $IN V1{WindingStaircase})
-----Candidate atom found: $OAV0{z}$COV0{z1}$OA$INV3{contains}
-----Computing Literal: $OAV0{z}$COV0{z1}$OA$INV3{contains}
-----Extracting Data From Var. Input String: V0{z}
-----Data From Var Computed. Name: z. Level:0
-----Creating  Variable.  Name:z. Level: 0. Type: 0
-----Variable Found in Quantified Set. V0{z}
-----Extracting Data From Var. Input String: V0{z1}
-----Data From Var Computed. Name: z1. Level:0
-----Creating  Variable.  Name:z1. Level: 0. Type: 0
-----Variable Found in Quantified Set. V0{z1}
-----Extracting Data From Var. Input String: V3{contains}
-----Data From Var Computed. Name: contains. Level:3
-----Creating  Variable.  Name:contains. Level: 3. Type: 0
-----Adding Variable to Set. V3{contains}
-----Literal created: ($OA V0{z} $CO V0{z1}$AO $IN V3{contains})
-----Computing subformula: ($FA V0{z1})($FA V0{z})( (V0{z1} $IN V1{WindingStaircase})  $AD ($OA V0{z} $CO V0{z1}$AO $IN V3{contains}) )
-----Candidate atom found: V0{z2}$INV1{WindingStaircase}
-----Computing Literal: V0{z2}$INV1{WindingStaircase}
-----Extracting Data From Var. Input String: V0{z2}
-----Data From Var Computed. Name: z2. Level:0
-----Creating  Variable.  Name:z2. Level: 0. Type: 0
-----Variable Found in Quantified Set. V0{z2}
-----Extracting Data From Var. Input String: V1{WindingStaircase}
-----Data From Var Computed. Name: WindingStaircase. Level:1
-----Creating  Variable.  Name:WindingStaircase. Level: 1. Type: 0
-----Variable Found in Set. V1{WindingStaircase}
-----Literal created: (V0{z2} $IN V1{WindingStaircase})
-----Candidate atom found: $OAV0{z}$COV0{z2}$OA$INV3{contains}
-----Computing Literal: $OAV0{z}$COV0{z2}$OA$INV3{contains}
-----Extracting Data From Var. Input String: V0{z}
-----Data From Var Computed. Name: z. Level:0
-----Creating  Variable.  Name:z. Level: 0. Type: 0
-----Variable Found in Quantified Set. V0{z}
-----Extracting Data From Var. Input String: V0{z2}
-----Data From Var Computed. Name: z2. Level:0
-----Creating  Variable.  Name:z2. Level: 0. Type: 0
-----Variable Found in Quantified Set. V0{z2}
-----Extracting Data From Var. Input String: V3{contains}
-----Data From Var Computed. Name: contains. Level:3
-----Creating  Variable.  Name:contains. Level: 3. Type: 0
-----Variable Found in Set. V3{contains}
-----Literal created: ($OA V0{z} $CO V0{z2}$AO $IN V3{contains})
-----Computing subformula: ($FA V0{z2})($FA V0{z})( (V0{z2} $IN V1{WindingStaircase})  $AD ($OA V0{z} $CO V0{z2}$AO $IN V3{contains}) )
-----Computing subformula: ($FA V0{z1})($FA V0{z})($FA V0{z2})( ( (V0{z1} $IN V1{WindingStaircase})  $AD ($OA V0{z} $CO V0{z1}$AO $IN V3{contains}) ) $AD ( (V0{z2} $IN V1{WindingStaircase})  $AD ($OA V0{z} $CO V0{z2}$AO $IN V3{contains}) ))
-----Computing subformula: ($FA V0{z})($FA V0{z1})($FA V0{z2})( (V0{z} $IN V1{Tower})  $IF ( ( (V0{z1} $IN V1{WindingStaircase})  $AD ($OA V0{z} $CO V0{z1}$AO $IN V3{contains}) ) $AD ( (V0{z2} $IN V1{WindingStaircase})  $AD ($OA V0{z} $CO V0{z2}$AO $IN V3{contains}) )))
-----Candidate atom found: V0{z1}$EQV0{z2}
-----Computing Literal: V0{z1}$EQV0{z2}
-----Extracting Data From Var. Input String: V0{z1}
-----Data From Var Computed. Name: z1. Level:0
-----Creating  Variable.  Name:z1. Level: 0. Type: 0
-----Variable Found in Quantified Set. V0{z1}
-----Extracting Data From Var. Input String: V0{z2}
-----Data From Var Computed. Name: z2. Level:0
-----Creating  Variable.  Name:z2. Level: 0. Type: 0
-----Variable Found in Quantified Set. V0{z2}
-----Literal created: (V0{z1} $EQ V0{z2})
-----Computing subformula: ($FA V0{z})($FA V0{z1})($FA V0{z2})( ( (V0{z} $IN V1{Tower})  $IF ( ( (V0{z1} $IN V1{WindingStaircase})  $AD ($OA V0{z} $CO V0{z1}$AO $IN V3{contains}) ) $AD ( (V0{z2} $IN V1{WindingStaircase})  $AD ($OA V0{z} $CO V0{z2}$AO $IN V3{contains}) ))) $IF (V0{z1} $EQ V0{z2}) )
-----Candidate atom found: V0{z1}$INV1{WindingStaircase}
-----Computing Literal: V0{z1}$INV1{WindingStaircase}
-----Extracting Data From Var. Input String: V0{z1}
-----Data From Var Computed. Name: z1. Level:0
-----Creating  Variable.  Name:z1. Level: 0. Type: 0
-----Variable Found in Quantified Set. V0{z1}
-----Extracting Data From Var. Input String: V1{WindingStaircase}
-----Data From Var Computed. Name: WindingStaircase. Level:1
-----Creating  Variable.  Name:WindingStaircase. Level: 1. Type: 0
-----Variable Found in Set. V1{WindingStaircase}
-----Literal created: (V0{z1} $IN V1{WindingStaircase})
-----Candidate atom found: $OAV0{z}$COV0{z1}$OA$INV3{contains}
-----Computing Literal: $OAV0{z}$COV0{z1}$OA$INV3{contains}
-----Extracting Data From Var. Input String: V0{z}
-----Data From Var Computed. Name: z. Level:0
-----Creating  Variable.  Name:z. Level: 0. Type: 0
-----Variable Found in Quantified Set. V0{z}
-----Extracting Data From Var. Input String: V0{z1}
-----Data From Var Computed. Name: z1. Level:0
-----Creating  Variable.  Name:z1. Level: 0. Type: 0
-----Variable Found in Quantified Set. V0{z1}
-----Extracting Data From Var. Input String: V3{contains}
-----Data From Var Computed. Name: contains. Level:3
-----Creating  Variable.  Name:contains. Level: 3. Type: 0
-----Variable Found in Set. V3{contains}
-----Literal created: ($OA V0{z} $CO V0{z1}$AO $IN V3{contains})
-----Computing subformula: ($FA V0{z1})($FA V0{z})( (V0{z1} $IN V1{WindingStaircase})  $AD ($OA V0{z} $CO V0{z1}$AO $IN V3{contains}) )
-----Computing subformula: ($FA V0{z})($FA V0{z1})($FA V0{z2})( ( ( (V0{z} $IN V1{Tower})  $IF ( ( (V0{z1} $IN V1{WindingStaircase})  $AD ($OA V0{z} $CO V0{z1}$AO $IN V3{contains}) ) $AD ( (V0{z2} $IN V1{WindingStaircase})  $AD ($OA V0{z} $CO V0{z2}$AO $IN V3{contains}) ))) $IF (V0{z1} $EQ V0{z2}) ) $AD ( (V0{z1} $IN V1{WindingStaircase})  $AD ($OA V0{z} $CO V0{z1}$AO $IN V3{contains}) ))
-----Candidate atom found: V0{z1}$QEV0{z2}
-----Computing Literal: V0{z1}$QEV0{z2}
-----Extracting Data From Var. Input String: V0{z1}
-----Data From Var Computed. Name: z1. Level:0
-----Creating  Variable.  Name:z1. Level: 0. Type: 0
-----Variable Found in Quantified Set. V0{z1}
-----Extracting Data From Var. Input String: V0{z2}
-----Data From Var Computed. Name: z2. Level:0
-----Creating  Variable.  Name:z2. Level: 0. Type: 0
-----Variable Found in Quantified Set. V0{z2}
-----Literal created: (V0{z1} $QE V0{z2})
-----Computing subformula: ($FA V0{z})($FA V0{z1})($FA V0{z2})( ( ( ( (V0{z} $IN V1{Tower})  $IF ( ( (V0{z1} $IN V1{WindingStaircase})  $AD ($OA V0{z} $CO V0{z1}$AO $IN V3{contains}) ) $AD ( (V0{z2} $IN V1{WindingStaircase})  $AD ($OA V0{z} $CO V0{z2}$AO $IN V3{contains}) ))) $IF (V0{z1} $EQ V0{z2}) ) $AD ( (V0{z1} $IN V1{WindingStaircase})  $AD ($OA V0{z} $CO V0{z1}$AO $IN V3{contains}) )) $IF (V0{z1} $QE V0{z2}) )
-----Final Formula: ($FA V0{z})($FA V0{z1})($FA V0{z2})( ( ( ( (V0{z} $IN V1{Tower})  $IF ( ( (V0{z1} $IN V1{WindingStaircase})  $AD ($OA V0{z} $CO V0{z1}$AO $IN V3{contains}) ) $AD ( (V0{z2} $IN V1{WindingStaircase})  $AD ($OA V0{z} $CO V0{z2}$AO $IN V3{contains}) ))) $IF (V0{z1} $EQ V0{z2}) ) $AD ( (V0{z1} $IN V1{WindingStaircase})  $AD ($OA V0{z} $CO V0{z1}$AO $IN V3{contains}) )) $IF (V0{z1} $QE V0{z2}) )
---Formula Ended 
-----Converting KB to NNF-----
-----Converting Formula to NNF:------
------($FA V0{z})($FA V0{z1})($FA V0{z2})( ( ( ( (V0{z} $IN V1{Tower})  $IF ( ( (V0{z1} $IN V1{WindingStaircase})  $AD ($OA V0{z} $CO V0{z1}$AO $IN V3{contains}) ) $AD ( (V0{z2} $IN V1{WindingStaircase})  $AD ($OA V0{z} $CO V0{z2}$AO $IN V3{contains}) ))) $IF (V0{z1} $EQ V0{z2}) ) $AD ( (V0{z1} $IN V1{WindingStaircase})  $AD ($OA V0{z} $CO V0{z1}$AO $IN V3{contains}) )) $IF (V0{z1} $QE V0{z2}) )
------ Dropping Negation boleans to subformulae of:-----
-------($FA V0{z})($FA V0{z1})($FA V0{z2})( ( ( ( (V0{z} $IN V1{Tower})  $IF ( ( (V0{z1} $IN V1{WindingStaircase})  $AD ($OA V0{z} $CO V0{z1}$AO $IN V3{contains}) ) $AD ( (V0{z2} $IN V1{WindingStaircase})  $AD ($OA V0{z} $CO V0{z2}$AO $IN V3{contains}) ))) $IF (V0{z1} $EQ V0{z2}) ) $AD ( (V0{z1} $IN V1{WindingStaircase})  $AD ($OA V0{z} $CO V0{z1}$AO $IN V3{contains}) )) $OR (V0{z1} $QE V0{z2}) )
------ Found Negation on "AND":
------ Dropping Negation boleans to subformulae of:-----
-------($FA V0{z})($FA V0{z1})($FA V0{z2})( ( ( (V0{z} $IN V1{Tower})  $IF ( ( (V0{z1} $IN V1{WindingStaircase})  $AD ($OA V0{z} $CO V0{z1}$AO $IN V3{contains}) ) $AD ( (V0{z2} $IN V1{WindingStaircase})  $AD ($OA V0{z} $CO V0{z2}$AO $IN V3{contains}) ))) $IF (V0{z1} $EQ V0{z2}) ) $OR ( (V0{z1} $IN V1{WindingStaircase})  $AD ($OA V0{z} $CO V0{z1}$AO $IN V3{contains}) ))
------ Found Negation on "AND":
------ Dropping Negation boleans to subformulae of:-----
-------($FA V0{z1})($FA V0{z})( (V0{z1} $IN V1{WindingStaircase})  $OR ($OA V0{z} $CO V0{z1}$AO $IN V3{contains}) )
------ Found Negation on Literal:
-------($FA V0{z})($FA V0{z1})($OA V0{z} $CO V0{z1}$AO $IN V3{contains}) 
------ Computing:
-------($OA V0{z} $CO V0{z1}$AO $NI V3{contains})
------ Found Negation on Literal:
-------($FA V0{z1})(V0{z1} $IN V1{WindingStaircase}) 
------ Computing:
-------(V0{z1} $NI V1{WindingStaircase})
------ Found Negation on "IF":
------ Dropping Negation boleans to subformulae of:-----
-------($FA V0{z})($FA V0{z1})($FA V0{z2})( ( (V0{z} $IN V1{Tower})  $IF ( ( (V0{z1} $IN V1{WindingStaircase})  $AD ($OA V0{z} $CO V0{z1}$AO $IN V3{contains}) ) $AD ( (V0{z2} $IN V1{WindingStaircase})  $AD ($OA V0{z} $CO V0{z2}$AO $IN V3{contains}) ))) $AD (V0{z1} $EQ V0{z2}) )
------ Found Negation on Literal:
-------($FA V0{z2})($FA V0{z1})(V0{z1} $EQ V0{z2}) 
------ Computing:
-------(V0{z1} $QE V0{z2})
------ Dropping Negation boleans to subformulae of:-----
-------($FA V0{z})($FA V0{z1})($FA V0{z2})( (V0{z} $IN V1{Tower})  $OR ( ( (V0{z1} $IN V1{WindingStaircase})  $AD ($OA V0{z} $CO V0{z1}$AO $IN V3{contains}) ) $AD ( (V0{z2} $IN V1{WindingStaircase})  $AD ($OA V0{z} $CO V0{z2}$AO $IN V3{contains}) )))
------ Dropping Negation boleans to subformulae of:-----
-------($FA V0{z1})($FA V0{z})($FA V0{z2})( ( (V0{z1} $IN V1{WindingStaircase})  $AD ($OA V0{z} $CO V0{z1}$AO $IN V3{contains}) ) $AD ( (V0{z2} $IN V1{WindingStaircase})  $AD ($OA V0{z} $CO V0{z2}$AO $IN V3{contains}) ))
------ Dropping Negation boleans to subformulae of:-----
-------($FA V0{z2})($FA V0{z})( (V0{z2} $IN V1{WindingStaircase})  $AD ($OA V0{z} $CO V0{z2}$AO $IN V3{contains}) )
------ Dropping Negation boleans to subformulae of:-----
-------($FA V0{z1})($FA V0{z})( (V0{z1} $IN V1{WindingStaircase})  $AD ($OA V0{z} $CO V0{z1}$AO $IN V3{contains}) )
------ Found Negation on Literal:
-------($FA V0{z})(V0{z} $IN V1{Tower}) 
------ Computing:
-------(V0{z} $NI V1{Tower})
------ End converting formula to NNF
------ Formula Computed:
-------($FA V0{z})($FA V0{z1})($FA V0{z2})( ( ( ( (V0{z} $NI V1{Tower})  $OR ( ( (V0{z1} $IN V1{WindingStaircase})  $AD ($OA V0{z} $CO V0{z1}$AO $IN V3{contains}) ) $AD ( (V0{z2} $IN V1{WindingStaircase})  $AD ($OA V0{z} $CO V0{z2}$AO $IN V3{contains}) ))) $AD (V0{z1} $QE V0{z2}) ) $OR ( (V0{z1} $NI V1{WindingStaircase})  $OR ($OA V0{z} $CO V0{z1}$AO $NI V3{contains}) )) $OR (V0{z1} $QE V0{z2}) )
-----End converting KB to NNF-----
-----Converting KB to CNF-----
-----Converting formula in CNF:
-----($FA V0{z})($FA V0{z1})($FA V0{z2})( ( ( ( (V0{z} $NI V1{Tower})  $OR ( ( (V0{z1} $IN V1{WindingStaircase})  $AD ($OA V0{z} $CO V0{z1}$AO $IN V3{contains}) ) $AD ( (V0{z2} $IN V1{WindingStaircase})  $AD ($OA V0{z} $CO V0{z2}$AO $IN V3{contains}) ))) $AD (V0{z1} $QE V0{z2}) ) $OR ( (V0{z1} $NI V1{WindingStaircase})  $OR ($OA V0{z} $CO V0{z1}$AO $NI V3{contains}) )) $OR (V0{z1} $QE V0{z2}) )
-----Resulting CNF formula:
-----($FA V0{z2})($FA V0{z})($FA V0{z1})( ( ( ( ( ( (V0{z2} $IN V1{WindingStaircase})  $OR (V0{z} $NI V1{Tower}) ) $OR ( (V0{z1} $NI V1{WindingStaircase})  $OR ($OA V0{z} $CO V0{z1}$AO $NI V3{contains}) )) $OR (V0{z1} $QE V0{z2}) ) $AD ( ( ( ($OA V0{z} $CO V0{z2}$AO $IN V3{contains})  $OR (V0{z} $NI V1{Tower}) ) $OR ( (V0{z1} $NI V1{WindingStaircase})  $OR ($OA V0{z} $CO V0{z1}$AO $NI V3{contains}) )) $OR (V0{z1} $QE V0{z2}) )) $AD ( ( ( ( (V0{z1} $IN V1{WindingStaircase})  $OR (V0{z} $NI V1{Tower}) ) $OR ( (V0{z1} $NI V1{WindingStaircase})  $OR ($OA V0{z} $CO V0{z1}$AO $NI V3{contains}) )) $OR (V0{z1} $QE V0{z2}) ) $AD ( ( ( ($OA V0{z} $CO V0{z1}$AO $IN V3{contains})  $OR (V0{z} $NI V1{Tower}) ) $OR ( (V0{z1} $NI V1{WindingStaircase})  $OR ($OA V0{z} $CO V0{z1}$AO $NI V3{contains}) )) $OR (V0{z1} $QE V0{z2}) ))) $AD ( ( (V0{z1} $QE V0{z2})  $OR ( (V0{z1} $NI V1{WindingStaircase})  $OR ($OA V0{z} $CO V0{z1}$AO $NI V3{contains}) )) $OR (V0{z1} $QE V0{z2}) ))
-----End converting KB to CNF:
---Moving quantifiers in formula: 
-----($FA V0{z2})($FA V0{z})($FA V0{z1})( ( ( ( ( ( (V0{z2} $IN V1{WindingStaircase})  $OR (V0{z} $NI V1{Tower}) ) $OR ( (V0{z1} $NI V1{WindingStaircase})  $OR ($OA V0{z} $CO V0{z1}$AO $NI V3{contains}) )) $OR (V0{z1} $QE V0{z2}) ) $AD ( ( ( ($OA V0{z} $CO V0{z2}$AO $IN V3{contains})  $OR (V0{z} $NI V1{Tower}) ) $OR ( (V0{z1} $NI V1{WindingStaircase})  $OR ($OA V0{z} $CO V0{z1}$AO $NI V3{contains}) )) $OR (V0{z1} $QE V0{z2}) )) $AD ( ( ( ( (V0{z1} $IN V1{WindingStaircase})  $OR (V0{z} $NI V1{Tower}) ) $OR ( (V0{z1} $NI V1{WindingStaircase})  $OR ($OA V0{z} $CO V0{z1}$AO $NI V3{contains}) )) $OR (V0{z1} $QE V0{z2}) ) $AD ( ( ( ($OA V0{z} $CO V0{z1}$AO $IN V3{contains})  $OR (V0{z} $NI V1{Tower}) ) $OR ( (V0{z1} $NI V1{WindingStaircase})  $OR ($OA V0{z} $CO V0{z1}$AO $NI V3{contains}) )) $OR (V0{z1} $QE V0{z2}) ))) $AD ( ( (V0{z1} $QE V0{z2})  $OR ( (V0{z1} $NI V1{WindingStaircase})  $OR ($OA V0{z} $CO V0{z1}$AO $NI V3{contains}) )) $OR (V0{z1} $QE V0{z2}) ))
-----Formula inserted: ($FA V0{z2})($FA V0{z1})($FA V0{z})( ( (V0{z1} $QE V0{z2})  $OR ( (V0{z1} $NI V1{WindingStaircase})  $OR ($OA V0{z} $CO V0{z1}$AO $NI V3{contains}) )) $OR (V0{z1} $QE V0{z2}) )
-----Formula inserted: ($FA V0{z})($FA V0{z1})($FA V0{z2})( ( ( ($OA V0{z} $CO V0{z1}$AO $IN V3{contains})  $OR (V0{z} $NI V1{Tower}) ) $OR ( (V0{z1} $NI V1{WindingStaircase})  $OR ($OA V0{z} $CO V0{z1}$AO $NI V3{contains}) )) $OR (V0{z1} $QE V0{z2}) )
-----Formula inserted: ($FA V0{z1})($FA V0{z})($FA V0{z2})( ( ( (V0{z1} $IN V1{WindingStaircase})  $OR (V0{z} $NI V1{Tower}) ) $OR ( (V0{z1} $NI V1{WindingStaircase})  $OR ($OA V0{z} $CO V0{z1}$AO $NI V3{contains}) )) $OR (V0{z1} $QE V0{z2}) )
-----Formula inserted: ($FA V0{z})($FA V0{z2})($FA V0{z1})( ( ( ($OA V0{z} $CO V0{z2}$AO $IN V3{contains})  $OR (V0{z} $NI V1{Tower}) ) $OR ( (V0{z1} $NI V1{WindingStaircase})  $OR ($OA V0{z} $CO V0{z1}$AO $NI V3{contains}) )) $OR (V0{z1} $QE V0{z2}) )
-----Formula inserted: ($FA V0{z2})($FA V0{z})($FA V0{z1})( ( ( (V0{z2} $IN V1{WindingStaircase})  $OR (V0{z} $NI V1{Tower}) ) $OR ( (V0{z1} $NI V1{WindingStaircase})  $OR ($OA V0{z} $CO V0{z1}$AO $NI V3{contains}) )) $OR (V0{z1} $QE V0{z2}) )
--- Applying Expansion Rule
----- Computing Formula: ($FA V0{z2})($FA V0{z})($FA V0{z1})( ( ( (V0{z2} $IN V1{WindingStaircase})  $OR (V0{z} $NI V1{Tower}) ) $OR ( (V0{z1} $NI V1{WindingStaircase})  $OR ($OA V0{z} $CO V0{z1}$AO $NI V3{contains}) )) $OR (V0{z1} $QE V0{z2}) )
------- Expanding Formula: ($FA V0{z2})($FA V0{z})($FA V0{z1})( ( ( (V0{z2} $IN V1{WindingStaircase})  $OR (V0{z} $NI V1{Tower}) ) $OR ( (V0{z1} $NI V1{WindingStaircase})  $OR ($OA V0{z} $CO V0{z1}$AO $NI V3{contains}) )) $OR (V0{z1} $QE V0{z2}) )
------- Expanded Formula: ( ( ( (V0{Annetta} $IN V1{WindingStaircase})  $OR (V0{Annetta} $NI V1{Tower}) ) $OR ( (V0{Annetta} $NI V1{WindingStaircase})  $OR ($OA V0{Annetta} $CO V0{Annetta}$AO $NI V3{contains}) )) $OR (V0{Annetta} $QE V0{Annetta}) )
----- Computing Formula: ($FA V0{z})($FA V0{z2})($FA V0{z1})( ( ( ($OA V0{z} $CO V0{z2}$AO $IN V3{contains})  $OR (V0{z} $NI V1{Tower}) ) $OR ( (V0{z1} $NI V1{WindingStaircase})  $OR ($OA V0{z} $CO V0{z1}$AO $NI V3{contains}) )) $OR (V0{z1} $QE V0{z2}) )
------- Expanding Formula: ($FA V0{z})($FA V0{z2})($FA V0{z1})( ( ( ($OA V0{z} $CO V0{z2}$AO $IN V3{contains})  $OR (V0{z} $NI V1{Tower}) ) $OR ( (V0{z1} $NI V1{WindingStaircase})  $OR ($OA V0{z} $CO V0{z1}$AO $NI V3{contains}) )) $OR (V0{z1} $QE V0{z2}) )
------- Expanded Formula: ( ( ( ($OA V0{Annetta} $CO V0{Annetta}$AO $IN V3{contains})  $OR (V0{Annetta} $NI V1{Tower}) ) $OR ( (V0{Annetta} $NI V1{WindingStaircase})  $OR ($OA V0{Annetta} $CO V0{Annetta}$AO $NI V3{contains}) )) $OR (V0{Annetta} $QE V0{Annetta}) )
----- Computing Formula: ($FA V0{z1})($FA V0{z})($FA V0{z2})( ( ( (V0{z1} $IN V1{WindingStaircase})  $OR (V0{z} $NI V1{Tower}) ) $OR ( (V0{z1} $NI V1{WindingStaircase})  $OR ($OA V0{z} $CO V0{z1}$AO $NI V3{contains}) )) $OR (V0{z1} $QE V0{z2}) )
------- Expanding Formula: ($FA V0{z1})($FA V0{z})($FA V0{z2})( ( ( (V0{z1} $IN V1{WindingStaircase})  $OR (V0{z} $NI V1{Tower}) ) $OR ( (V0{z1} $NI V1{WindingStaircase})  $OR ($OA V0{z} $CO V0{z1}$AO $NI V3{contains}) )) $OR (V0{z1} $QE V0{z2}) )
------- Expanded Formula: ( ( ( (V0{Annetta} $IN V1{WindingStaircase})  $OR (V0{Annetta} $NI V1{Tower}) ) $OR ( (V0{Annetta} $NI V1{WindingStaircase})  $OR ($OA V0{Annetta} $CO V0{Annetta}$AO $NI V3{contains}) )) $OR (V0{Annetta} $QE V0{Annetta}) )
----- Computing Formula: ($FA V0{z})($FA V0{z1})($FA V0{z2})( ( ( ($OA V0{z} $CO V0{z1}$AO $IN V3{contains})  $OR (V0{z} $NI V1{Tower}) ) $OR ( (V0{z1} $NI V1{WindingStaircase})  $OR ($OA V0{z} $CO V0{z1}$AO $NI V3{contains}) )) $OR (V0{z1} $QE V0{z2}) )
------- Expanding Formula: ($FA V0{z})($FA V0{z1})($FA V0{z2})( ( ( ($OA V0{z} $CO V0{z1}$AO $IN V3{contains})  $OR (V0{z} $NI V1{Tower}) ) $OR ( (V0{z1} $NI V1{WindingStaircase})  $OR ($OA V0{z} $CO V0{z1}$AO $NI V3{contains}) )) $OR (V0{z1} $QE V0{z2}) )
------- Expanded Formula: ( ( ( ($OA V0{Annetta} $CO V0{Annetta}$AO $IN V3{contains})  $OR (V0{Annetta} $NI V1{Tower}) ) $OR ( (V0{Annetta} $NI V1{WindingStaircase})  $OR ($OA V0{Annetta} $CO V0{Annetta}$AO $NI V3{contains}) )) $OR (V0{Annetta} $QE V0{Annetta}) )
----- Computing Formula: ($FA V0{z2})($FA V0{z1})($FA V0{z})( ( (V0{z1} $QE V0{z2})  $OR ( (V0{z1} $NI V1{WindingStaircase})  $OR ($OA V0{z} $CO V0{z1}$AO $NI V3{contains}) )) $OR (V0{z1} $QE V0{z2}) )
------- Expanding Formula: ($FA V0{z2})($FA V0{z1})($FA V0{z})( ( (V0{z1} $QE V0{z2})  $OR ( (V0{z1} $NI V1{WindingStaircase})  $OR ($OA V0{z} $CO V0{z1}$AO $NI V3{contains}) )) $OR (V0{z1} $QE V0{z2}) )
------- Expanded Formula: ( ( (V0{Annetta} $QE V0{Annetta})  $OR ( (V0{Annetta} $NI V1{WindingStaircase})  $OR ($OA V0{Annetta} $CO V0{Annetta}$AO $NI V3{contains}) )) $OR (V0{Annetta} $QE V0{Annetta}) )
--- End Expansion Rule
---Checking for Clash in Vector of Formulae
---End Check for Clash in Vector of Formulae
---Checking for Clash in Vector of Formulae
---End Check for Clash in Vector of Formulae
---Checking for Clash in Vector of Formulae
---End Check for Clash in Vector of Formulae
---Checking for Clash in Vector of Formulae
---End Check for Clash in Vector of Formulae
------Fulfilling formula: ( ( ( (V0{Annetta} $IN V1{WindingStaircase})  $OR (V0{Annetta} $NI V1{Tower}) ) $OR ( (V0{Annetta} $NI V1{WindingStaircase})  $OR ($OA V0{Annetta} $CO V0{Annetta}$AO $NI V3{contains}) )) $OR (V0{Annetta} $QE V0{Annetta}) )
-----Checking for Clash: (V0{Annetta} $IN V1{WindingStaircase})
-----Checking for Tautology: (V0{Annetta} $IN V1{WindingStaircase})
-----Checking for Clash: (V0{Annetta} $NI V1{Tower})
-----Checking for Tautology: (V0{Annetta} $NI V1{Tower})
-----Checking for Clash: (V0{Annetta} $IN V1{WindingStaircase}) and (V0{Annetta} $NI V1{Tower})
-----Checking for Clash: (V0{Annetta} $NI V1{WindingStaircase})
-----Checking for Tautology: (V0{Annetta} $NI V1{WindingStaircase})
-----Checking for Clash: (V0{Annetta} $IN V1{WindingStaircase}) and (V0{Annetta} $NI V1{WindingStaircase})
-----Checking for Clash: ($OA V0{Annetta} $CO V0{Annetta}$AO $NI V3{contains})
-----Checking for Tautology: ($OA V0{Annetta} $CO V0{Annetta}$AO $NI V3{contains})
-----Checking for Clash: (V0{Annetta} $NI V1{Tower}) and ($OA V0{Annetta} $CO V0{Annetta}$AO $NI V3{contains})
-----Checking for Clash: (V0{Annetta} $QE V0{Annetta})
---Applying PB-RULE
----- Computing Literal from PB-Rule. 
------ Computing Literal from PB-Rule. (V0{Annetta} $NI V1{Tower})
------ Computing Literal from PB-Rule. (V0{Annetta} $IN V1{Tower})
------ Computing Literal from PB-Rule. ($OA V0{Annetta} $CO V0{Annetta}$AO $NI V3{contains})
------Fulfilling formula: ( ( ( ($OA V0{Annetta} $CO V0{Annetta}$AO $IN V3{contains})  $OR (V0{Annetta} $NI V1{Tower}) ) $OR ( (V0{Annetta} $NI V1{WindingStaircase})  $OR ($OA V0{Annetta} $CO V0{Annetta}$AO $NI V3{contains}) )) $OR (V0{Annetta} $QE V0{Annetta}) )
-----Checking for Clash: ($OA V0{Annetta} $CO V0{Annetta}$AO $IN V3{contains})
-----Checking for Tautology: ($OA V0{Annetta} $CO V0{Annetta}$AO $IN V3{contains})
-----Checking for Clash: (V0{Annetta} $NI V1{Tower})
-----Checking for Tautology: (V0{Annetta} $NI V1{Tower})
-----Checking for Clash: ($OA V0{Annetta} $CO V0{Annetta}$AO $IN V3{contains}) and (V0{Annetta} $NI V1{Tower})
-----Checking for Clash: (V0{Annetta} $NI V1{WindingStaircase})
-----Checking for Tautology: (V0{Annetta} $NI V1{WindingStaircase})
-----Checking for Clash: ($OA V0{Annetta} $CO V0{Annetta}$AO $IN V3{contains}) and (V0{Annetta} $NI V1{WindingStaircase})
-----Checking for Clash: (V0{Annetta} $NI V1{Tower}) and (V0{Annetta} $NI V1{WindingStaircase})
-----Checking for Clash: ($OA V0{Annetta} $CO V0{Annetta}$AO $NI V3{contains})
-----Checking for Tautology: ($OA V0{Annetta} $CO V0{Annetta}$AO $NI V3{contains})
-----Checking for Clash: ($OA V0{Annetta} $CO V0{Annetta}$AO $IN V3{contains}) and ($OA V0{Annetta} $CO V0{Annetta}$AO $NI V3{contains})
-----Checking for Clash: (V0{Annetta} $QE V0{Annetta})
-----Checking for Clash: (V0{Annetta} $NI V1{WindingStaircase}) and (V0{Annetta} $NI V1{Tower})
-----Checking for Clash: (V0{Annetta} $NI V1{Tower}) and (V0{Annetta} $NI V1{Tower})
-----Checking for Clash: ($OA V0{Annetta} $CO V0{Annetta}$AO $IN V3{contains})
-----Checking for Tautology: ($OA V0{Annetta} $CO V0{Annetta}$AO $IN V3{contains})
-----Checking for Clash: (V0{Annetta} $NI V1{Tower})
-----Checking for Tautology: (V0{Annetta} $NI V1{Tower})
-----Checking for Clash: ($OA V0{Annetta} $CO V0{Annetta}$AO $IN V3{contains}) and (V0{Annetta} $NI V1{Tower})
-----Checking for Clash: (V0{Annetta} $NI V1{WindingStaircase})
-----Checking for Tautology: (V0{Annetta} $NI V1{WindingStaircase})
-----Checking for Clash: ($OA V0{Annetta} $CO V0{Annetta}$AO $IN V3{contains}) and (V0{Annetta} $NI V1{WindingStaircase})
-----Checking for Clash: (V0{Annetta} $NI V1{Tower}) and (V0{Annetta} $NI V1{WindingStaircase})
-----Checking for Clash: ($OA V0{Annetta} $CO V0{Annetta}$AO $NI V3{contains})
-----Checking for Tautology: ($OA V0{Annetta} $CO V0{Annetta}$AO $NI V3{contains})
-----Checking for Clash: ($OA V0{Annetta} $CO V0{Annetta}$AO $IN V3{contains}) and ($OA V0{Annetta} $CO V0{Annetta}$AO $NI V3{contains})
-----Checking for Clash: (V0{Annetta} $QE V0{Annetta})
-----Checking for Clash: (V0{Annetta} $NI V1{WindingStaircase}) and (V0{Annetta} $IN V1{Tower})
-----Checking for Clash: (V0{Annetta} $NI V1{WindingStaircase}) and ($OA V0{Annetta} $CO V0{Annetta}$AO $NI V3{contains})
-----Checking for Clash: (V0{Annetta} $NI V1{Tower}) and (V0{Annetta} $IN V1{Tower})
---Applying E-RULE
----- Computing Literal from E-Rule: (V0{Annetta} $NI V1{WindingStaircase})
------Fulfilling formula: ( ( ( (V0{Annetta} $IN V1{WindingStaircase})  $OR (V0{Annetta} $NI V1{Tower}) ) $OR ( (V0{Annetta} $NI V1{WindingStaircase})  $OR ($OA V0{Annetta} $CO V0{Annetta}$AO $NI V3{contains}) )) $OR (V0{Annetta} $QE V0{Annetta}) )
-----Checking for Clash: (V0{Annetta} $IN V1{WindingStaircase})
-----Checking for Tautology: (V0{Annetta} $IN V1{WindingStaircase})
-----Checking for Clash: (V0{Annetta} $NI V1{Tower})
-----Checking for Tautology: (V0{Annetta} $NI V1{Tower})
-----Checking for Clash: (V0{Annetta} $IN V1{WindingStaircase}) and (V0{Annetta} $NI V1{Tower})
-----Checking for Clash: (V0{Annetta} $NI V1{WindingStaircase})
-----Checking for Tautology: (V0{Annetta} $NI V1{WindingStaircase})
-----Checking for Clash: (V0{Annetta} $IN V1{WindingStaircase}) and (V0{Annetta} $NI V1{WindingStaircase})
-----Checking for Clash: ($OA V0{Annetta} $CO V0{Annetta}$AO $NI V3{contains})
-----Checking for Tautology: ($OA V0{Annetta} $CO V0{Annetta}$AO $NI V3{contains})
-----Checking for Clash: (V0{Annetta} $NI V1{Tower}) and ($OA V0{Annetta} $CO V0{Annetta}$AO $NI V3{contains})
-----Checking for Clash: (V0{Annetta} $QE V0{Annetta})
-----Checking for Clash: (V0{Annetta} $NI V1{Tower}) and (V0{Annetta} $NI V1{Tower})
-----Checking for Clash: (V0{Annetta} $IN V1{WindingStaircase})
-----Checking for Tautology: (V0{Annetta} $IN V1{WindingStaircase})
-----Checking for Clash: (V0{Annetta} $NI V1{Tower})
-----Checking for Tautology: (V0{Annetta} $NI V1{Tower})
-----Checking for Clash: (V0{Annetta} $IN V1{WindingStaircase}) and (V0{Annetta} $NI V1{Tower})
-----Checking for Clash: (V0{Annetta} $NI V1{WindingStaircase})
-----Checking for Tautology: (V0{Annetta} $NI V1{WindingStaircase})
-----Checking for Clash: (V0{Annetta} $IN V1{WindingStaircase}) and (V0{Annetta} $NI V1{WindingStaircase})
-----Checking for Clash: ($OA V0{Annetta} $CO V0{Annetta}$AO $NI V3{contains})
-----Checking for Tautology: ($OA V0{Annetta} $CO V0{Annetta}$AO $NI V3{contains})
-----Checking for Clash: (V0{Annetta} $NI V1{Tower}) and ($OA V0{Annetta} $CO V0{Annetta}$AO $NI V3{contains})
-----Checking for Clash: (V0{Annetta} $QE V0{Annetta})
-----Checking for Clash: (V0{Annetta} $NI V1{Tower}) and (V0{Annetta} $IN V1{Tower})
-----Checking for Clash: ($OA V0{Annetta} $CO V0{Annetta}$AO $NI V3{contains}) and (V0{Annetta} $IN V1{Tower})
-----Checking for Clash: ($OA V0{Annetta} $CO V0{Annetta}$AO $NI V3{contains}) and ($OA V0{Annetta} $CO V0{Annetta}$AO $NI V3{contains})
------Fulfilling formula: ( ( ( ($OA V0{Annetta} $CO V0{Annetta}$AO $IN V3{contains})  $OR (V0{Annetta} $NI V1{Tower}) ) $OR ( (V0{Annetta} $NI V1{WindingStaircase})  $OR ($OA V0{Annetta} $CO V0{Annetta}$AO $NI V3{contains}) )) $OR (V0{Annetta} $QE V0{Annetta}) )
-----Checking for Clash: ($OA V0{Annetta} $CO V0{Annetta}$AO $IN V3{contains})
-----Checking for Tautology: ($OA V0{Annetta} $CO V0{Annetta}$AO $IN V3{contains})
-----Checking for Clash: (V0{Annetta} $NI V1{Tower})
-----Checking for Tautology: (V0{Annetta} $NI V1{Tower})
-----Checking for Clash: ($OA V0{Annetta} $CO V0{Annetta}$AO $IN V3{contains}) and (V0{Annetta} $NI V1{Tower})
-----Checking for Clash: (V0{Annetta} $NI V1{WindingStaircase})
-----Checking for Tautology: (V0{Annetta} $NI V1{WindingStaircase})
-----Checking for Clash: ($OA V0{Annetta} $CO V0{Annetta}$AO $IN V3{contains}) and (V0{Annetta} $NI V1{WindingStaircase})
-----Checking for Clash: (V0{Annetta} $NI V1{Tower}) and (V0{Annetta} $NI V1{WindingStaircase})
-----Checking for Clash: ($OA V0{Annetta} $CO V0{Annetta}$AO $NI V3{contains})
-----Checking for Tautology: ($OA V0{Annetta} $CO V0{Annetta}$AO $NI V3{contains})
-----Checking for Clash: ($OA V0{Annetta} $CO V0{Annetta}$AO $IN V3{contains}) and ($OA V0{Annetta} $CO V0{Annetta}$AO $NI V3{contains})
-----Checking for Clash: (V0{Annetta} $QE V0{Annetta})
-----Checking for Clash: (V0{Annetta} $NI V1{WindingStaircase}) and (V0{Annetta} $NI V1{Tower})
-----Checking for Clash: (V0{Annetta} $NI V1{Tower}) and (V0{Annetta} $NI V1{Tower})
-----Checking for Clash: ($OA V0{Annetta} $CO V0{Annetta}$AO $IN V3{contains})
-----Checking for Tautology: ($OA V0{Annetta} $CO V0{Annetta}$AO $IN V3{contains})
-----Checking for Clash: (V0{Annetta} $NI V1{Tower})
-----Checking for Tautology: (V0{Annetta} $NI V1{Tower})
-----Checking for Clash: ($OA V0{Annetta} $CO V0{Annetta}$AO $IN V3{contains}) and (V0{Annetta} $NI V1{Tower})
-----Checking for Clash: (V0{Annetta} $NI V1{WindingStaircase})
-----Checking for Tautology: (V0{Annetta} $NI V1{WindingStaircase})
-----Checking for Clash: ($OA V0{Annetta} $CO V0{Annetta}$AO $IN V3{contains}) and (V0{Annetta} $NI V1{WindingStaircase})
-----Checking for Clash: (V0{Annetta} $NI V1{Tower}) and (V0{Annetta} $NI V1{WindingStaircase})
-----Checking for Clash: ($OA V0{Annetta} $CO V0{Annetta}$AO $NI V3{contains})
-----Checking for Tautology: ($OA V0{Annetta} $CO V0{Annetta}$AO $NI V3{contains})
-----Checking for Clash: ($OA V0{Annetta} $CO V0{Annetta}$AO $IN V3{contains}) and ($OA V0{Annetta} $CO V0{Annetta}$AO $NI V3{contains})
-----Checking for Clash: (V0{Annetta} $QE V0{Annetta})
-----Checking for Clash: (V0{Annetta} $NI V1{WindingStaircase}) and (V0{Annetta} $IN V1{Tower})
-----Checking for Clash: (V0{Annetta} $NI V1{WindingStaircase}) and ($OA V0{Annetta} $CO V0{Annetta}$AO $NI V3{contains})
-----Checking for Clash: (V0{Annetta} $NI V1{WindingStaircase}) and (V0{Annetta} $NI V1{WindingStaircase})
------Fulfilling formula: ( ( (V0{Annetta} $QE V0{Annetta})  $OR ( (V0{Annetta} $NI V1{WindingStaircase})  $OR ($OA V0{Annetta} $CO V0{Annetta}$AO $NI V3{contains}) )) $OR (V0{Annetta} $QE V0{Annetta}) )
-----Checking for Clash: (V0{Annetta} $QE V0{Annetta})
-----Checking for Clash: (V0{Annetta} $NI V1{WindingStaircase})
-----Checking for Tautology: (V0{Annetta} $NI V1{WindingStaircase})
-----Checking for Clash: ($OA V0{Annetta} $CO V0{Annetta}$AO $NI V3{contains})
-----Checking for Tautology: ($OA V0{Annetta} $CO V0{Annetta}$AO $NI V3{contains})
-----Checking for Clash: (V0{Annetta} $NI V1{WindingStaircase}) and ($OA V0{Annetta} $CO V0{Annetta}$AO $NI V3{contains})
-----Checking for Clash: (V0{Annetta} $QE V0{Annetta})
-----Checking for Clash: (V0{Annetta} $NI V1{WindingStaircase}) and (V0{Annetta} $NI V1{Tower})
-----Checking for Clash: ($OA V0{Annetta} $CO V0{Annetta}$AO $NI V3{contains}) and (V0{Annetta} $NI V1{Tower})
---Applying PB-RULE
----- Computing Literal from PB-Rule. 
------ Computing Literal from PB-Rule. (V0{Annetta} $NI V1{WindingStaircase})
------ Computing Literal from PB-Rule. (V0{Annetta} $IN V1{WindingStaircase})
------ Computing Literal from PB-Rule. ($OA V0{Annetta} $CO V0{Annetta}$AO $NI V3{contains})
-----Checking for Clash: (V0{Annetta} $QE V0{Annetta})
-----Checking for Clash: (V0{Annetta} $NI V1{WindingStaircase})
-----Checking for Tautology: (V0{Annetta} $NI V1{WindingStaircase})
-----Checking for Clash: ($OA V0{Annetta} $CO V0{Annetta}$AO $NI V3{contains})
-----Checking for Tautology: ($OA V0{Annetta} $CO V0{Annetta}$AO $NI V3{contains})
-----Checking for Clash: (V0{Annetta} $NI V1{WindingStaircase}) and ($OA V0{Annetta} $CO V0{Annetta}$AO $NI V3{contains})
-----Checking for Clash: (V0{Annetta} $QE V0{Annetta})
-----Checking for Clash: (V0{Annetta} $NI V1{WindingStaircase}) and (V0{Annetta} $IN V1{Tower})
-----Checking for Clash: (V0{Annetta} $NI V1{WindingStaircase}) and ($OA V0{Annetta} $CO V0{Annetta}$AO $NI V3{contains})
-----Checking for Clash: (V0{Annetta} $NI V1{WindingStaircase}) and (V0{Annetta} $NI V1{WindingStaircase})
----- Computing equivalence classes set 
-----Reading query file
-----Parsing line:($FA V0{t}) (V0{t} $IN V1{Person})
---Formula Inserted: ($FA V0{t}) (V0{t} $IN V1{Person})
-----Analizyng input formula
-----Candidate atom found: $FAV0{t}
-----Computing Literal: $FAV0{t}
-----Extracting Data From Var. Input String: V0{t}
-----Data From Var Computed. Name: t. Level:0
-----Creating Quantified Variable.  Name:t. Level: 0. Type: 1
-----Adding Quantified Variable to Set.V0{t}
-----Candidate atom found: V0{t}$INV1{Person}
-----Computing Literal: V0{t}$INV1{Person}
-----Extracting Data From Var. Input String: V0{t}
-----Data From Var Computed. Name: t. Level:0
-----Creating  Variable.  Name:t. Level: 0. Type: 0
-----Variable Found in Quantified Set. V0{t}
-----Extracting Data From Var. Input String: V1{Person}
-----Data From Var Computed. Name: Person. Level:1
-----Creating  Variable.  Name:Person. Level: 1. Type: 0
-----Adding Variable to Set. V1{Person}
-----Literal created: (V0{t} $IN V1{Person})
-----Final Formula: ($FA V0{t})(V0{t} $IN V1{Person}) 
---Formula Ended 
---Executing Query
----Query selected:($FA V0{t})(V0{t} $IN V1{Person}) 
-----Literal computed:(V0{t} $IN V1{Person})
